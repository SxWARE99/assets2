--discord.gg/dGPyacsdzA
gameversion = "1.33.1.f1894"
DESCRALL = "• Critical Ops "..gameversion.." •\n• SxViP 1.0 | by SxWARE#7403 •\n• Only For 64bit (arm64_v8a) •"



il2cpp64 = "7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 03 00 b7 00 01 00 00 00 00 ce 71 00 00 00 00 00 40 00 00 00 00 00 00 00"
--OFFSETS √

bypass = 0xE38EF0
bypass1 = 0xCE5EA8
bypass2 = 0xCA9934
bypass3 = 0xCA9384
bypass4 = 0xCA9D78
bypass5 = 0xCA8F40
bypass6 = 0xCAA328
bypass8 = 0xD66FD8
-- Class -> System<className>, IAlwaysUpdatableSystem, ISystem, IService
-- |-AppManager.GetService<EntityDB>
bypass9 = 0x9E3510
bypass10 = 0x9E5190
bypass11 = 0x9E5090
bypass12 = 0x9E4F90
bypass13 = 0x9E4E90
bypass14 = 0x9E4D90
bypass15 = 0x9E4C90
bypass16 = 0x9E4B90
bypass17 = 0x9E4A90
bypass18 = 0x9E4990
bypass19 = 0x9E4890
bypass20 = 0x9E4790
bypass21 = 0x9E4690
bypass22 = 0x9E4590
bypass23 = 0x9E4490
bypass24 = 0x9E4390
bypass25 = 0x9E4290
bypass26 = 0x9E4190
bypass27 = 0x9E4090
bypass28 = 0x9E3F90
bypass29 = 0x9E3E90
bypass30 = 0x9E3D80
bypass31 = 0x9E3C70
bypass32 = 0x9E3B60
bypass33 = 0x9E3A50
bypass34 = 0x9E3940
bypass35 = 0x9E3830
bypass36 = 0x9E3720
bypass37 = 0x9E3610
-- bypass
fixbypass = 0xD4A4E8--getconnectionbutton
fixbypass2 = 0xD4A580--createconnectionbutton
fixbypass3 = 0xD893A8--getsessiontoken
fixbypass4 = 0xD89280--setsessiontoheaders
fixbypass5 = 0xD3BE34--profilecardfindreq/getheaders
fixbypass6 = 0xEF766C--onconnectionstatuschanged

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••
--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••
--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••


flyy = 0x1E33FF4--get_height
jump = 0xC58634 + 0x3C--get_horizontalvelocity
espradar = 0xC4287C + 0x9C--fetchfollowedcharacterteamindex
fix = 0xB55E2C--movenext
team1 = 0xFD0CF0 + 0xA8--checkvisibility
team2 = 0xFD0A24--get_isvisible
team3 = 0x1E35C7C--public static bool Linecast
norecoil = 0xFCF9F4--applyrecoil
nospread = 0xFCF8FC--updatespread
noaimpunch = 0xFCFB10--applyaimpunch
alwaysup = 0xAE9D98--get_suppressor
headrain = 0xAFE45C + 0xE8--raycastcharacter
bodyrain = 0xAFE45C + 0xD4--raycastcharacter
noflashgrenade = 0xAF63B0--raycastgrenade
sped = 0xFCF564--getcurrentmaxspeed
wal = 0xAFDF08 + 0xD8--procceshitbuffers
pwb = 0xE5EBB0--updateenabledstate
noc = 0xA19938--getcapsuleparameters
aac = 0xAE9BFC--get_crosshair
testt = 0xD2AE44--isvalidtarget
sss = 0xCAEF04--is_owned
sss2 = 0xCAEFB8--is_owned
sss3 = 0xCAF0B4--is_owned
sss4 = 0xCAF160--is_owned
s = 0xB24EB0--skiptutorial
s2 = 0xB251AC--skiptutorial
s3 = 0xB1DB6C--skiptutorial
s4 = 0xB25230--skiptutorial
knife = 0xAFCB60 + 0x258--meleehit
aimassist = 0xCBBB6C

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••
--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••
--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••
--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••
--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••
--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••
--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••
--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••
--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••
--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••


function sc()
if changer == nil then
gg.clearResults()
gg.setVisible(false)
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber("hA7110000A8110000A9110000661F0000671F0000681F0000AD110000691F00006A1F0000", gg.TYPE_BYTE)
gg.refineNumber("h67", gg.TYPE_BYTE)
rCount = gg.getResultCount()
if rCount == 0 then return gg.alert("🔍 Inject Error ❌") end
BaseAddressC = gg.getResults(rCount)[1].address
gg.clearResults()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber("hB51B0000010000003A1A0000", gg.TYPE_BYTE)
gg.refineNumber("hB5", gg.TYPE_BYTE)
rCount = gg.getResultCount()
if rCount == 0 then return gg.alert("🔍 Inject Error ❌") end
BaseAddressG = gg.getResults(rCount)[1].address
gg.clearResults()
gg.toast("🔍 Inject Error ❌")
gg.sleep(200)
changer = true
end
if changer == true or false then end
s = gg.multiChoice({
"🔪 • Knifes",
"🧤 • Gloves",
"⬅️ ~ EXIT"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if s == nil then
gg.toast("❌nothing selected❌")
else
if s[1] == true then k() end
if s[2] == true then g() end
if s[3] == true then gg.copyText('Discord : SxWARE#7403') os.exit() end end end





function k()
kn = gg.multiChoice({
"Karambit",
"Kukri",
"Remix",
"Balisong",
"Tactical Axe",
"TacTool",
"Default",
"Pipe Wrench",
"Short Sword",
"Meat Cleaver",
"Trench knife",
"TomaHawk",
"DragonMourn",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if kn == nil then
gg.toast("❌nothing selected❌")
else
if kn[1] == true then ka() end
if kn[2] == true then ku() end
if kn[3] == true then re() end
if kn[4] == true then bu() end
if kn[5] == true then ta() end
if kn[6] == true then tac() end
if kn[7] == true then def() end
if kn[8] == true then pw() end
if kn[9] == true then ss() end
if kn[10] == true then mc() end
if kn[11] == true then tk() end
if kn[12] == true then th() end
if kn[13] == true then dm() end
if kn[14] == true then sc() end end end

function ka()
kar = gg.multiChoice({
"Default",
"Bitten",
"Elite",
"Revolution",
"Astrolabe",
"Old Money",
"Inkdrop",
"Efflorescence",
"Elven",
"Magente Vice",
"Cicero",
"Sweet toth",
"Armadillo",
"Furious",
"Verglas",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if kar == nil then
gg.toast("❌nothing selected❌")
else
if kar[1] == true then k1() end
if kar[2] == true then k2() end
if kar[3] == true then k3() end
if kar[4] == true then k4() end
if kar[5] == true then k5() end
if kar[6] == true then k6() end
if kar[7] == true then k7() end
if kar[8] == true then k8() end
if kar[9] == true then k9() end
if kar[10] == true then k10() end
if kar[11] == true then k11() end
if kar[12] == true then k12() end
if kar[13] == true then k13() end
if kar[14] == true then k14() end
if kar[15] == true then k15() end
if kar[16] == true then k() end end end

function k1()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 4449
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT SKIN ACTIVED")
end

function k2()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 4453
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT BITTEN SKIN ACTIVED")
end

function k3()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 6086
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT ELITE SKIN ACTIVED")
end

function k4()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7230
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT REVOLUTION SKIN ACTIVED")
end

function k5() 
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7592
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT ASTROLABE SKIN ACTIVED")
end

function k6()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8028
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT OLD MONEY SKIN ACTIVED")
end

function k7()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 4454
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT INKDROP SKIN ACTIVED")
end

function k8()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8075
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT EFFLORESCENCE SKIN ACTIVED")
end

function k9()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8199
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT ELVEN SKIN ACTIVED")
end

function k10()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8292
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT MAGENTE VICE SKIN ACTIVED")
end

function k11()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8555
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT CICERO SKIN ACTIVED")
end

function k12()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8691
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT SWEET TOTH SKIN ACTIVED")
end

function k13()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8882
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT ARMADILLO SKIN ACTIVED")
end

function k14()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9012
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT FURIOUS SKIN ACTIVED")
end

function k15()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9379
gg.setValues(t)
gg.setValues(t)
gg.toast("KARAMBIT VERGLAS SKIN ACTIVED")
end



function ku()
kuk = gg.multiChoice({
"Default",
"Aviary",
"Glow",
"Maritime",
"Polycult",
"Waves",
"Sun Stone",
"Extermination",
"Shipwreck",
"Triple Attack",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if kuk == nil then
gg.toast("❌nothing selected❌")
else
if kuk[1] == true then ki1() end
if kuk[2] == true then ki2() end
if kuk[3] == true then ki3() end
if kuk[4] == true then ki4() end
if kuk[5] == true then ki5() end
if kuk[6] == true then ki6() end
if kuk[7] == true then ki7() end
if kuk[8] == true then ki8() end
if kuk[9] == true then ki9() end
if kuk[10] == true then ki10() end
if kuk[11] == true then k() end end end

function ki1()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 700
gg.setValues(t)
gg.setValues(t)
gg.toast("KUKRI DEFAULT SKIN ACTIVED")
end

function ki2()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 703
gg.setValues(t)
gg.setValues(t)
gg.toast("KUKRI AVIARY SKIN ACTIVED")
end






function ki3()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 702
gg.setValues(t)
gg.setValues(t)
gg.toast("KUKRI GLOW SKIN ACTIVED")
end





function ki4()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 1323
gg.setValues(t)
gg.setValues(t)
gg.toast("KUKRI MARITIME SKIN ACTIVED")
end




function ki5()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 701
gg.setValues(t)
gg.setValues(t)
gg.toast("KUKRI POLYCULT SKIN ACTIVED")
end

function ki6()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 1393
gg.setValues(t)
gg.setValues(t)
gg.toast("KUKRI WAVES SKIN ACTIVED")
end

function ki7()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7593
gg.setValues(t)
gg.setValues(t)
gg.toast("KUKRI SUN STONE SKIN ACTIVED")
end

function ki8()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8327
gg.setValues(t)
gg.setValues(t)
gg.toast("KUKRI EXTERMINATION SKIN ACTIVED")
end

function ki9()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8381
gg.setValues(t)
gg.setValues(t)
gg.toast("KUKRI SHIPWRECK SKIN ACTIVED")
end

function ki10()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8753
gg.setValues(t)
gg.setValues(t)
gg.toast("KUKRI TRIPLE ATTACK SKIN ACTIVED")
end





function re()
rem = gg.multiChoice({
"Default",
"Fractal",
"Zuma Beach",
"The Goat",
"Meep Meep",
"Split window",
"Reanimation",
"Warp Tunnel",
"Draco Viridis",
"Draco Umbra",
"Draco Rubra",
"Security",
"Triangulation",
"Draco Magne",
"Powershot",
"Infrared",
"Purple Damascos",
"Wrapped",
"Predator",
"Power Surge",
"Porcelain",
"Hot Rod",
"Cuda",
"Shell B",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if rem == nil then
gg.toast("❌nothing selected❌")
else
if rem[1] == true then r1() end
if rem[2] == true then r2() end
if rem[3] == true then r3() end
if rem[4] == true then r4() end
if rem[5] == true then r5() end
if rem[6] == true then r6() end
if rem[7] == true then r7() end
if rem[8] == true then r8() end
if rem[9] == true then r9() end
if rem[10] == true then r10() end
if rem[11] == true then r11() end
if rem[12] == true then r12() end
if rem[13] == true then r13() end
if rem[14] == true then r14() end
if rem[15] == true then r15() end
if rem[16] == true then r16() end
if rem[17] == true then r17() end
if rem[18] == true then r18() end
if rem[19] == true then r19() end
if rem[20] == true then r20() end
if rem[21] == true then r21() end
if rem[22] == true then r22() end
if rem[23] == true then r23() end
if rem[24] == true then r24() end
if rem[25] == true then k() end end end

function r1()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 717
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX DEFAULT SKIN ACTIVED")
end


function r2()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9335
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX FRACTAL SKIN ACTIVED")
end

function r3()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9171
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX ZUMA BEACH SKIN ACTIVED")
end

function r4()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9170
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX THE GOAT SKIN ACTIVED")
end

function r5()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9169
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX MEEP MEEP SKIN ACTIVED")
end

function r6()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9166
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX SPLIT WINDOW SKIN ACTIVED")
end

function r7()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9002
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX REANIMATION SKIN ACTIVED")
end

function r8()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8962
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX WARP TUNNEL SKIN ACTIVED")
end

function r9()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8895
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX DRACO VIRIDIS SKIN ACTIVED")
end

function r10()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8894
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX DRACO UMBRA SKIN ACTIVED")
end

function r11()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8893
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX DRACO RUBRA SKIN ACTIVED")
end

function r12()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8760
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX SECURITY SKIN ACTIVED")
end

function r13()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8585
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX TRIANGULATION SKIN ACTIVED")
end


function r14()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8228
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX DRACO MAGNE SKIN ACTIVED")
end

function r15()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8062
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX POWERSHOT SKIN ACTIVED")
end

function r16()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8061
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX INFRARED SKIN ACTIVED")
end

function r17()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7198
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX PURPLE DAMASCOS SKIN ACTIVED")
end

function r18()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 1346
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX WRAPPED SKIN ACTIVED")
end

function r19()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 753
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX PREDATOR SKIN ACTIVED")
end

function r20()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 1325
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX POWER SURGE SKIN ACTIVED")
end

function r21()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 718
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX PORCELAIN SKIN ACTIVED")
end

function r22()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 756
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX HOT ROD SKIN ACTIVED")
end

function r23()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9405
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX CUDA SKIN ACTIVED")
end

function r24()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9406
gg.setValues(t)
gg.setValues(t)
gg.toast("REMIX SHELL B SKIN ACTIVED")
end



function bu()
bal = gg.multiChoice({
"Default",
"Rime",
"Monarch",
"Crustacean",
"Canyon",
"Chrysanthemum",
"Firebrand",
"From The Deep",
"Sludge Worm",
"Harmony",
"Magente Vice",
"Living Blade",
"The Great Wite",
"Fire And İce",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if bal == nil then
gg.toast("❌nothing selected❌")
else
if bal[1] == true then b1() end
if bal[2] == true then b2() end
if bal[3] == true then b3() end
if bal[4] == true then b4() end
if bal[5] == true then b5() end
if bal[6] == true then b6() end
if bal[7] == true then b7() end
if bal[8] == true then b8() end
if bal[9] == true then b9() end
if bal[10] == true then b10() end
if bal[11] == true then b11() end
if bal[12] == true then b12() end
if bal[13] == true then b13() end
if bal[14] == true then b14() end
if bal[15] == true then k() end end end

function b1()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7684
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG DEFAULT SKIN ACTIVED")
end

function b2()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7706
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG RIME SKIN ACTIVED")
end

function b3()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7707
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG MONARCH SKIN ACTIVED")
end


function b4()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7844
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG CRUSTACEAN SKIN ACTIVED")
end

function b5()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8036
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG CANYON SKIN ACTIVED")
end

function b6()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8069
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG CHRYSANTHEMUM SKIN ACTIVED")
end

function b7()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8261
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG FIREBRAND SKIN ACTIVED")
end

function b8()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8450
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG FROM THE DEEP SKIN ACTIVED")
end

function b9()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8502
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG SLUDGE WORN SKIN ACTIVED")
end

function b10()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8648
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG HARMONY SKIN ACTIVED")
end

function b11()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8967
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG MAGENTE VICE SKIN ACTIVED")
end


function b12()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9050
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG LIVING BLADE SKIN ACTIVED")
end

function b13()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9278
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG THE GREAT WITE SKIN ACTIVED")
end

function b14()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9391
gg.setValues(t)
gg.setValues(t)
gg.toast("BALISONG FIRE AND ICE SKIN ACTIVED")
end






function ta()
tx = gg.multiChoice({
"Default",
"Baronial",
"Olive",
"Hot Rod",
"Surfdog",
"Acid Rain",
"Continuum",
"Mix",
"Encrypted",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if tac == nil then
gg.toast("❌nothing selected❌")
else
if tx[1] == true then t1() end
if tx[2] == true then t2() end
if tx[3] == true then t3() end
if tx[4] == true then t4() end
if tx[5] == true then t5() end
if tx[6] == true then t6() end
if tx[7] == true then t7() end
if tx[8] == true then t8() end
if tx[9] == true then t9() end
if tx[10] == true then k() end end end

function t1()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 4672
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTICAL AXE DEFAULT SKIN ACTIVED")
end

function t2()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 4693
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTICAL AXE BARONIAL SKIN ACTIVED")
end

function t3()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 4711
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTICAL AXE OLIVE SKIN ACTIVED")
end

function t4()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7186
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTICAL AXE HOT ROD SKIN ACTIVED")
end

function t5()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7225
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTICAL AXE SURFDOG SKIN ACTIVED")
end

function t6()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7832
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTICAL AXE ACID RAIN SKIN ACTIVED")
end


function t7()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8737
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTICAL AXE CONTINUUM SKIN ACTIVED")
end

function t8()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8806
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTICAL AXE MIX SKIN ACTIVED")
end

function t9()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9154
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTICAL AXE ENCRYPTED SKIN ACTIVED")
end






function tac()
tt = gg.multiChoice({
"Default",
"Catacomb",
"Grandeur",
"Pestilence",
"Conjunctivitis",
"Scythe",
"Tigris",
"Tunnels",
"Bandit",
"Hacktool",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if tt == nil then
gg.toast("❌nothing selected❌")
else
if tt[1] == true then tac1() end
if tt[2] == true then tac2() end
if tt[3] == true then tac3() end
if tt[4] == true then tac4() end
if tt[5] == true then tac5() end
if tt[6] == true then tac6() end
if tt[7] == true then tac7() end
if tt[8] == true then tac8() end
if tt[9] == true then tac9() end
if tt[10] == true then tac10() end
if tt[11] == true then k() end end end

function tac1()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 731
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTOOL DEFAULT SKIN ACTIVED")
end

function tac2()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 827
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTOOL CATACOMB SKIN ACTIVED")
end

function tac3()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 1324
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTOOL GRANDEUR SKIN ACTIVED")
end

function tac4()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 4021
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTOOL PESTILENCE SKIN ACTIVED")
end

function tac5()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 6128
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTOOL CONJUNCTIVITIS SKIN ACTIVED")
end

function tac6()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 741
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTOOL SCYTHE SKIN ACTIVED")
end

function tac7()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 754
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTOOL TIGRIS SKIN ACTIVED")
end

function tac8()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 3921
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTOOL TUNNELS SKIN ACTIVED")
end

function tac9()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7697
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTOOL BANDIT SKIN ACTIVED")
end

function tac10()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8586
gg.setValues(t)
gg.setValues(t)
gg.toast("TACTOOL HACKTOOL SKIN ACTIVED")
end

function def()
df = gg.multiChoice({
"Bad Moon Rising",
"Bloom",
"Carbon",
"Shatter",
"Tianlong",
"Twisted",
"Feather",
"Kide",
"Synth Grid",
"Decryption",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if df == nil then
gg.toast("❌nothing selected❌")
else
if df[1] == true then d2() end
if df[2] == true then d3() end
if df[3] == true then d4() end
if df[4] == true then d5() end
if df[5] == true then d6() end
if df[6] == true then d7() end
if df[7] == true then d8() end
if df[8] == true then d9() end
if df[9] == true then d10() end
if df[10] == true then d11() end
if df[11] == true then k() end end end


   
function d2()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 3923
gg.setValues(t)
gg.setValues(t)
gg.toast("DEFAULT BAD MOON RISING SKIN ACTIVED")
end



function d3()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 1394
gg.setValues(t)
gg.setValues(t)
gg.toast("DEFAULT BLOOM SKIN ACTIVED")
end

function d4()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 704
gg.setValues(t)
gg.setValues(t)
gg.toast("DEFAULT CARBON SKIN ACTIVED")
end

function d5()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 824
gg.setValues(t)
gg.setValues(t)
gg.toast("DEFAULT SHATTER SKIN ACTIVED")
end

function d6()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 1321
gg.setValues(t)
gg.setValues(t)
gg.toast("DEFAULT TIANLONG SKIN ACTIVED")
end

function d7()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 705
gg.setValues(t)
gg.setValues(t)
gg.toast("DEFAULT TWISTED SKIN ACTIVED")
end

function d8()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7170
gg.setValues(t)
gg.setValues(t)
gg.toast("DEFAULT FEATHER SKIN ACTIVED")
end

function d9()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8700
gg.setValues(t)
gg.setValues(t)
gg.toast("DEFAULT KIDE SKIN ACTIVED")
end

function d10()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8964
gg.setValues(t)
gg.setValues(t)
gg.toast("DEFAULT SYNTH GRID SKIN ACTIVED")
end


function d11()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9268
gg.setValues(t)
gg.setValues(t)
gg.toast("DEFAULT DECRYPTION SKIN ACTIVED")
end

function pw()
pi = gg.multiChoice({
"Default",
"Stare",
"Undead",
"Manhunt",
"Fly Swatter",
"Uprooted",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if pi == nil then
gg.toast("❌nothing selected❌")
else
if pi[1] == true then p1() end
if pi[2] == true then p2() end
if pi[3] == true then p3() end
if pi[4] == true then p4() end
if pi[5] == true then p5() end
if pi[6] == true then p6() end
if pi[7] == true then k() end end end

function p1()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7498
gg.setValues(t)
gg.setValues(t)
gg.toast("PIPE WRENCH DEFAULT SKIN ACTIVED")
end

function p2()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7582
gg.setValues(t)
gg.setValues(t)
gg.toast("PIPE WRENCH STARE SKIN ACTIVED")
end

function p3()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7583
gg.setValues(t)
gg.setValues(t)
gg.toast("PIPE WRENCH UNDEAD SKIN ACTIVED")
end

function p4()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 7584
gg.setValues(t)
gg.setValues(t)
gg.toast("PIPE WRENCH MANHUNT SKIN ACTIVED")
end

function p5()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8848
gg.setValues(t)
gg.setValues(t)
gg.toast("PIPE WRENCH FLY SWATTER SKIN ACTIVED")
end

function p6()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9052
gg.setValues(t)
gg.setValues(t)
gg.toast("PIPE WRENCH UPROOTED SKIN ACTIVED")
end



function ss()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8341
gg.setValues(t)
gg.setValues(t)
gg.toast("SHORT SWORD SKIN ACTIVED")
end


function mc()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8615
gg.setValues(t)
gg.setValues(t)
gg.toast("MEAT CLEAVER SKIN ACTIVED")
end

function tk()
tc = gg.multiChoice({
"Default",
"Wormhole",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if tc == nil then
gg.toast("❌nothing selected❌")
else
if tc[1] == true then tr1() end
if tc[2] == true then tr2() end
if tc[3] == true then k() end end end

function tr1()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8743
gg.setValues(t)
gg.setValues(t)
gg.toast("TRENCH KNIFE DEFAULT SKIN ACTIVED")
end

function tr2()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 9443
gg.setValues(t)
gg.setValues(t)
gg.toast("TRENCH KNIFE WORMHOLE SKIN ACTIVED")
end


function th()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8869
gg.setValues(t)
gg.setValues(t)
gg.toast("TOMAHAWK SKIN ACTIVED")
end


function dm()
local t = {}
t[1] = {}
t[1].address = BaseAddressC
t[1].flags = gg.TYPE_DWORD
t[1].value = 8897
gg.setValues(t)
gg.setValues(t)
gg.toast("DRAGONMOURN SKIN ACTIVED")
end






   
   
   
   
   
   
   
   
   
   
   
function g()
gl = gg.multiChoice({
"T ~ Gloves",
"CT ~ Gloves",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if gl == nil then
gg.toast("❌nothing selected❌")
else
if gl[1] == true then ac() end
if gl[2] == true then acc() end
if gl[3] == true then k() end end end
function ac()
t = gg.multiChoice({
"Chronos",
"Shatter Time",
"Frost",
"Modern Combat",
"Black Paisley",
"Stained Glass Short",
"Stained Glass Long",
"Good Knight",
"Combatant 1990",
"Brine",
"Patchwork",
"Nanocarbon",
"Sweet Tooth",
"Snow Ops",
"Continuum",
"Security",
"Acid",
"Bug Catcher",
"Purple Imperial",
"Blue Imperial",
"Red Imperial",
"Orange Paisley",
"Green Paisley",
"Dragon Leather",
"Black Knight",
"Blood Knight",
"Sync",
"Neon Grime",
"Escapee",
"Mint Blast",
"Target Lock",
"The Goat",
"Meep Meep",
"Zuma Beach",
"Split Window",
"North Wind",
"Working Man",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if t == nil then
gg.toast("❌nothing selected❌")
else
if t[1] == true then T1() end
if t[2] == true then T2() end
if t[3] == true then T3() end
if t[4] == true then T4() end
if t[5] == true then T5() end
if t[6] == true then T6() end
if t[7] == true then T7() end
if t[8] == true then T8() end
if t[9] == true then T9() end
if t[10] == true then T10() end
if t[11] == true then T11() end
if t[12] == true then T12() end
if t[13] == true then T13() end
if t[14] == true then T14() end
if t[15] == true then T15() end
if t[16] == true then T16() end
if t[17] == true then T17() end
if t[18] == true then T18() end
if t[19] == true then T19() end
if t[20] == true then T20() end
if t[21] == true then T21() end
if t[22] == true then T22() end
if t[23] == true then T23() end
if t[24] == true then T24() end
if t[25] == true then T25() end
if t[26] == true then T26() end
if t[27] == true then T27() end
if t[28] == true then T28() end
if t[29] == true then T29() end
if t[30] == true then T30() end
if t[31] == true then T31() end
if t[32] == true then T32() end
if t[33] == true then T33() end
if t[34] == true then T34() end
if t[35] == true then T35() end
if t[36] == true then T36() end
if t[37] == true then T37() end
if t[38] == true then k() end end end


function T1()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 7582
gg.setValues(t)
gg.setValues(t)
gg.toast("CHRONOS [T] SKIN ACTIVED")
end

function T2()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 7583
gg.setValues(t)
gg.setValues(t)
gg.toast("SHATTER TIME [T] SKIN ACTIVED")
end

function T3()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 7772
gg.setValues(t)
gg.setValues(t)
gg.toast("FROST [T] SKIN ACTIVED")
end

function T4()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 7834
gg.setValues(t)
gg.setValues(t)
gg.toast("MODERN CONBATANT [T] SKIN ACTIVED")
end

function T5()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 8285
gg.setValues(t)
gg.setValues(t)
gg.toast("BLACK PAISLEY [T] SKIN ACTIVED")
end

function T6()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 8428
gg.setValues(t)
gg.setValues(t)
gg.toast("STAINED GLASS SHORT [T] SKIN ACTIVED")
end

function T7()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 8429
gg.setValues(t)
gg.setValues(t)
gg.toast("STAINED GLASS LONG [T] SKIN ACTIVED")
end

function T8()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 8557
gg.setValues(t)
gg.setValues(t)
gg.toast("GOOD KNIGHT [T] SKIN ACTIVED")
end

function T9()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 8766
gg.setValues(t)
gg.setValues(t)
gg.toast("COMBATANT 1990 [T] SKIN ACTIVED")
end

function T10()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 8926
gg.setValues(t)
gg.setValues(t)
gg.toast("BRINE [T] SKIN ACTIVED")
end

function T11()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9068
gg.setValues(t)
gg.setValues(t)
gg.toast("PATCHWORK [T] SKIN ACTIVED")
end


function T12()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9131
gg.setValues(t)
gg.setValues(t)
gg.toast("NANO CARBON [T] SKIN ACTIVED")
end

function T13()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9436
gg.setValues(t)
gg.setValues(t)
gg.toast("SWEET TOTH [T] SKIN ACTIVED")
end

function T14()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9446
gg.setValues(t)
gg.setValues(t)
gg.toast("SNOW OPS [T] SKIN ACTIVED")
end

function T15()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9517
gg.setValues(t)
gg.setValues(t)
gg.toast("CONRINUUM [T] SKIN ACTIVED")
end

function T16()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9577
gg.setValues(t)
gg.setValues(t)
gg.toast("SECURITY [T] SKIN ACTIVED")
end

function T17()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9578
gg.setValues(t)
gg.setValues(t)
gg.toast("ACID [T] SKIN ACTIVED")
end

function T18()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9663
gg.setValues(t)
gg.setValues(t)
gg.toast("BUG CATCHER [T] SKIN ACTIVED")
end

function T19()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9702
gg.setValues(t)
gg.setValues(t)
gg.toast("PURPLE IMPERIAL [T] SKIN ACTIVED")
end

function T20()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9718
gg.setValues(t)
gg.setValues(t)
gg.toast("BLUE IMPERIAL [T] SKIN ACTIVED")
end

function T21()
local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9719
gg.setValues(t)
gg.setValues(t)
gg.toast("RED IMPERIAL [T] SKIN ACTIVED")
end

 function T22()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9818
gg.setValues(t)
gg.setValues(t)
gg.toast("ORANGE PAISLEY [T] SKIN ACTIVED")
end
 
 function T23()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 9848
gg.setValues(t)
gg.setValues(t)
gg.toast("GREEN PAISLEY [T] SKIN ACTIVED")
end
 
 function T24()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 13380
gg.setValues(t)
gg.setValues(t)
gg.toast("DRAGON LEATHER [T] SKIN ACTIVED")
end
 
 function T25()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 13399
gg.setValues(t)
gg.setValues(t)
gg.toast("BLACK KNIGHT [T] SKIN ACTIVED")
end
 
 function T26()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 13400
gg.setValues(t)
gg.setValues(t)
gg.toast("BLOOD KNIGHT [T] SKIN ACTIVED")
end
 
 function T27()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 13425
gg.setValues(t)
gg.setValues(t)
gg.toast("SYNC [T] SKIN ACTIVED")
end
 
 function T28()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 13800
gg.setValues(t)
gg.setValues(t)
gg.toast("NEON GRIME [T] SKIN ACTIVED")
end
 
 function T29()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 13801
gg.setValues(t)
gg.setValues(t)
gg.toast("ESCAPEE [T] SKIN ACTIVED")
end
 
 function T30()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 13802
gg.setValues(t)
gg.setValues(t)
gg.toast("MINT BLAST [T] SKIN ACTIVED")
end
 
 function T31()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 14074
gg.setValues(t)
gg.setValues(t)
gg.toast("TARGET LOCK [T] SKIN ACTIVED")
end
 
 function T32()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 14131
gg.setValues(t)
gg.setValues(t)
gg.toast("THE GOAT [T] SKIN ACTIVED")
end
 
 function T33()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 14265
gg.setValues(t)
gg.setValues(t)
gg.toast("MEEP MEEP [T] SKIN ACTIVED")
end
 
 function T34()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 14270
gg.setValues(t)
gg.setValues(t)
gg.toast("ZUMA BEACH [T] SKIN ACTIVED")
end
 
 function T35()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 14271
gg.setValues(t)
gg.setValues(t)
gg.toast("SPLIT WINDOW [T] SKIN ACTIVED")
end
 
 function T36()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 14461
gg.setValues(t)
gg.setValues(t)
gg.toast("NORTH WIND [T] SKIN ACTIVED")
end
 
 function T37()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG
t[1].flags = gg.TYPE_DWORD
t[1].value = 7423
gg.setValues(t)
gg.setValues(t)
gg.toast("WORKING MAN [T] SKIN ACTIVED")
end
 
 
 
 
 
 
 
 function acc()
ct = gg.multiChoice({
"Chronos",
"Shatter Time",
"Frost",
"Modern Combat",
"Black Paisley",
"Stained Glass Short",
"Stained Glass Long",
"Good Knight",
"Combatant 1990",
"Brine",
"Patchwork",
"Nanocarbon",
"Sweet Tooth",
"Snow Ops",
"Continuum",
"Security",
"Acid",
"Bug Catcher",
"Purple Imperial",
"Blue Imperial",
"Red Imperial",
"Orange Paisley",
"Green Paisley",
"Dragon Leather",
"Black Knight",
"Blood Knight",
"Sync",
"Neon Grime",
"Escapee",
"Mint Blast",
"Target Lock",
"The Goat",
"Meep Meep",
"Zuma Beach",
"Split Window",
"North Wind",
"Working Man",
"⬅️ • Back"
}, nil, ([[• SkinChanger Menu
• Developer: SxWARE
]]))
if ct == nil then
gg.toast("❌nothing selected❌")
else
if ct[1] == true then ct1() end
if ct[2] == true then ct2() end
if ct[3] == true then ct3() end
if ct[4] == true then ct4() end
if ct[5] == true then ct5() end
if ct[6] == true then ct6() end
if ct[7] == true then ct7() end
if ct[8] == true then ct8() end
if ct[9] == true then ct9() end
if ct[10] == true then ct10() end
if ct[11] == true then ct11() end
if ct[12] == true then ct12() end
if ct[13] == true then ct13() end
if ct[14] == true then ct14() end
if ct[15] == true then ct15() end
if ct[16] == true then ct16() end
if ct[17] == true then ct17() end
if ct[18] == true then ct18() end
if ct[19] == true then ct19() end
if ct[20] == true then ct20() end
if ct[21] == true then ct21() end
if ct[22] == true then ct22() end
if ct[23] == true then ct23() end
if ct[24] == true then ct24() end
if ct[25] == true then ct25() end
if ct[26] == true then ct26() end
if ct[27] == true then ct27() end
if ct[28] == true then ct28() end
if ct[29] == true then ct29() end
if ct[30] == true then ct30() end
if ct[31] == true then ct31() end
if ct[32] == true then ct32() end
if ct[33] == true then ct33() end
if ct[34] == true then ct34() end
if ct[35] == true then ct35() end
if ct[36] == true then ct36() end
if ct[37] == true then ct37() end
if ct[38] == true then k() end end end
 
 function ct1()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 7582
gg.setValues(t)
gg.setValues(t)
gg.toast("CHRONOS [CT] SKIN ACTIVED")
end

function ct2()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 7583
gg.setValues(t)
gg.setValues(t)
gg.toast("SHATTER TIME [CT] SKIN ACTIVED")
end

function ct3()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 7772
gg.setValues(t)
gg.setValues(t)
gg.toast("FROST [CT] SKIN ACTIVED")
end

function ct4()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 7834
gg.setValues(t)
gg.setValues(t)
gg.toast("MODERN CONBATANT [CT] SKIN ACTIVED")
end

function ct5()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 8285
gg.setValues(t)
gg.setValues(t)
gg.toast("BLACK PAISLEY [CT] SKIN ACTIVED")
end

function ct6()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 8428
gg.setValues(t)
gg.setValues(t)
gg.toast("STAINED GLASS SHORT [CT] SKIN ACTIVED")
end

function ct7()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 8429
gg.setValues(t)
gg.setValues(t)
gg.toast("STAINED GLASS LONG [CT] SKIN ACTIVED")
end

function ct8()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 8557
gg.setValues(t)
gg.setValues(t)
gg.toast("GOOD KNIGHT [CT] SKIN ACTIVED")
end

function ct9()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 8766
gg.setValues(t)
gg.setValues(t)
gg.toast("COMBATANT 1990 [CT] SKIN ACTIVED")
end

function ct10()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 8926
gg.setValues(t)
gg.setValues(t)
gg.toast("BRINE [CT] SKIN ACTIVED")
end

function ct11()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9068
gg.setValues(t)
gg.setValues(t)
gg.toast("PATCHWORK [CT] SKIN ACTIVED")
end


function ct12()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9131
gg.setValues(t)
gg.setValues(t)
gg.toast("NANO CARBON [CT] SKIN ACTIVED")
end

function ct13()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9436
gg.setValues(t)
gg.setValues(t)
gg.toast("SWEET TOTH [CT] SKIN ACTIVED")
end

function ct14()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9446
gg.setValues(t)
gg.setValues(t)
gg.toast("SNOW OPS [CT] SKIN ACTIVED")
end

function ct15()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9517
gg.setValues(t)
gg.setValues(t)
gg.toast("CONRINUUM [CT] SKIN ACTIVED")
end

function ct16()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9577
gg.setValues(t)
gg.setValues(t)
gg.toast("SECURITY [CT] SKIN ACTIVED")
end

function ct17()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9578
gg.setValues(t)
gg.setValues(t)
gg.toast("ACID [CT] SKIN ACTIVED")
end

function ct18()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9663
gg.setValues(t)
gg.setValues(t)
gg.toast("BUG CATCHER [CT] SKIN ACTIVED")
end

function ct19()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9702
gg.setValues(t)
gg.setValues(t)
gg.toast("PURPLE IMPERIAL [CT] SKIN ACTIVED")
end

function ct20()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9718
gg.setValues(t)
gg.setValues(t)
gg.toast("BLUE IMPERIAL [CT] SKIN ACTIVED")
end

function ct21()
local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9719
gg.setValues(t)
gg.setValues(t)
gg.toast("RED IMPERIAL [CT] SKIN ACTIVED")
end

 function ct22()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9818
gg.setValues(t)
gg.setValues(t)
gg.toast("ORANGE PAISLEY [CT] SKIN ACTIVED")
end
 
 function ct23()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 9848
gg.setValues(t)
gg.setValues(t)
gg.toast("GREEN PAISLEY [CT] SKIN ACTIVED")
end
 
 function ct24()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 13380
gg.setValues(t)
gg.setValues(t)
gg.toast("DRAGON LEATHER [CT] SKIN ACTIVED")
end
 
 function ct25()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 13399
gg.setValues(t)
gg.setValues(t)
gg.toast("BLACK KNIGHT [CT] SKIN ACTIVED")
end
 
 function ct26()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 13400
gg.setValues(t)
gg.setValues(t)
gg.toast("BLOOD KNIGHT [CT] SKIN ACTIVED")
end
 
 function ct27()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 13425
gg.setValues(t)
gg.setValues(t)
gg.toast("SYNC [CT] SKIN ACTIVED")
end
 
 function ct28()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 13800
gg.setValues(t)
gg.setValues(t)
gg.toast("NEON GRIME [CT] SKIN ACTIVED")
end
 
 function ct29()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 13801
gg.setValues(t)
gg.setValues(t)
gg.toast("ESCAPEE [CT] SKIN ACTIVED")
end
 
 function ct30()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 13802
gg.setValues(t)
gg.setValues(t)
gg.toast("MINT BLAST [CT] SKIN ACTIVED")
end
 
 function ct31()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 14074
gg.setValues(t)
gg.setValues(t)
gg.toast("TARGET LOCK [CT] SKIN ACTIVED")
end
 
 function ct32()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 14131
gg.setValues(t)
gg.setValues(t)
gg.toast("THE GOAT [CT] SKIN ACTIVED")
end
 
 function ct33()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 14265
gg.setValues(t)
gg.setValues(t)
gg.toast("MEEP MEEP [CT] SKIN ACTIVED")
end
 
 function ct34()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 14270
gg.setValues(t)
gg.setValues(t)
gg.toast("ZUMA BEACH [CT] SKIN ACTIVED")
end
 
 function ct35()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 14271
gg.setValues(t)
gg.setValues(t)
gg.toast("SPLIT WINDOW [CT] SKIN ACTIVED")
end
 
 function ct36()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 14461
gg.setValues(t)
gg.setValues(t)
gg.toast("NORTH WIND [CT] SKIN ACTIVED")
end
 
 function ct37()
 local t = {}
t[1] = {}
t[1].address = BaseAddressG + 0x8
t[1].flags = gg.TYPE_DWORD
t[1].value = 7423
gg.setValues(t)
gg.setValues(t)
gg.toast("WORKING MAN [CT] SKIN ACTIVED")
end




--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••--•••••••••••

-- no dec bitches